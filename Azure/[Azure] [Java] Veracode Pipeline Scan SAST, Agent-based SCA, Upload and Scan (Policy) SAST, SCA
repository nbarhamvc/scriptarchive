# YML for use in Azure pipelines. Note that many scan types are included here (along with multiple methods of submitting scans) as an EXAMPLE.
# It may not make sense to have all scans run, sequentially or at all, depending on your workflow.

trigger:
- main

# Note a Ubuntu image is being used. 

pool:
  vmImage: ubuntu-latest

steps:

# Build Java application. Always reference Veracode build packaging guidance at https://docs.veracode.com/r/compilation_packaging for your language/framework.
# If you have questions about how to package your application correctly, schedule a consultation in the application profile on the Veracode platform.
# Please note, the Applciation Security Consultant in a scheduled consultation will not be able to assist with pipeline config. Contact your Veracode CSE for assistance with this.

- task: Maven@3
  displayName: Application Build (Maven)
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

# Pipeline Scan SAST option 1 - conducted using Bash script & Java wrapper directly using API ID/KEY. 
# Takes artifact from build step and uploads to Veracode servers for scanning.

- task: Bash@3
  displayName: Veracode Pipeline Scan SAST
  inputs:
    targetType: 'inline'
    script: |
      curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
      unzip -o pipeline-scan-LATEST.zip
      java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f $(System.DefaultWorkingDirectory)<INSERTFILEFORSCANNING> || true 
- publish: $(System.DefaultWorkingDirectory)/results.json

# Pipeline Scan SAST option 2 - conducted with unofficial/unsupported task from Azure marketplace, using API ID/KEY.

# - task: VeracodePipelineScan@0
#   displayName: Veracode Pipeline Scan SAST
#   inputs:
#     VeracodeAPIID: '$(VERACODE_API_ID)'
#     VeracodeAPIsecret: '$(VERACODE_API_KEY)'
#     fileToScan: '$(System.DefaultWorkingDirectory)<INSERTFILEFORSCANNING>'

# Tasks to generate XML and HTML reports using an **UNOFFICIAL, UNSUPPORTED VERACODE COMMUNITY SCRIPT**, then publishing them as artifacts.

- task: CmdLine@2
  displayName: Optional save results as HTML And XML
  inputs:
    script: |
      echo Saving results as xml and html
      curl -sSO https://raw.githubusercontent.com/cadonuno/pipeline2detailedreport/master/detailedreport.py 
      python detailedreport.py --html
      python detailedreport.py --html --html_name "pipeline-report-filtered.html" --xml_name "detailed_report_filtered.xml" -f filtered_results.json
      echo Finished saving results
  condition:
      succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: Optional publish artifact 1
  condition:
      succeededOrFailed()
  inputs:
    pathToPublish: 'pipeline-report.html'
    artifactName: pipeline-result

- task: PublishBuildArtifacts@1
  displayName: Optional publish artifact 2
  condition:
    succeededOrFailed()
  inputs:
    pathToPublish: 'pipeline-report-filtered.html'
    artifactName: pipeline-result

- task: PublishBuildArtifacts@1
  displayName: Optional publish artifact 3
  condition:
    succeededOrFailed()
  inputs:
    pathToPublish: 'detailed_report.xml'
    artifactName: pipeline-result

- task: PublishBuildArtifacts@1
  displayName: Optional publish artifact 4
  condition:
    succeededOrFailed()
  inputs:
    pathToPublish: 'detailed_report_filtered.xml'
    artifactName: pipeline-result

# Agent-based SCA scan submission, scans repo directly, does not require built artifact. 
# Requires SRCCLR_API_TOKEN to be generated on platform then saved as secret for use here.
# Sourceclear was acquired by Veracode in 2018 - this is a trusted domain. The script will download the agent, run it for the purposes of scan, then delete itself.

- task: CmdLine@2
  displayName: 'Agent-based SCA'
  env:
    SRCCLR_API_TOKEN: $(SRCCLR_API_TOKEN)
  inputs:
    script: 'curl -sSL  https://download.sourceclear.com/ci.sh | sh'
#   workingDirectory: $<specify target if not pwd> e.g. {{ parameters.projectPath }}

# Upload and Scan SAST, SCA (Policy or Sandbox Scan) using the marketplace task. A number of parameters can be passed, see docs.veracode.com for relevant article.
# Takes artifact built earlier and uploads to Veracode platform for scanning.
# If no sandbox parameter  is specified, Policy Scan will take place.
# Avoid exposing credentials in pipeline - endpoint connection is used here.

- task: Veracode@3
  displayName: Upload and Scan SAST, SCA
  inputs:
    ConnectionDetailsSelection: 'Service Connection'
    AnalysisService: 'Veracode'
    veracodeAppProfile: '<INSERTAPPNAMEONVERACODEPLATFORM>'
    version: '$(build.buildNumber)'
    filepath: '$(System.DefaultWorkingDirectory)<INSERTFILEFORSCANNING>'
    failBuildIfUploadAndScanBuildStepFails: true
    importResults: true
    failBuildOnPolicyFail: true
    maximumWaitTime: '30'
  continueOnError: true
    
# Configurable task, to import results into Azure boards as work items.

- task: Veracode Flaw Importer@3
  displayName: Import flaws if scan fails Policy
  inputs:
    ConnectionDetailsSelection: 'Service Connection'
    AnalysisService: 'Veracode'
    veracodeAppProfile: '<INSERTAPPNAMEONVERACODEPLATFORM>'
    importType: 'All Unmitigated Flaws Violating Policy'
    workItemType: 'Task'
    area: '$(system.teamProject)'
    flawImportLimit: '1000'
  condition: failed()

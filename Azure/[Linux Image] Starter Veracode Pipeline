### NOTE: THIS IS THE MOST *BASIC* VERACODE PIPELINE WITH ALL SCANS FOR DEMO PURPOSES. MUCH MORE CUSTOMISATION IS AVAILABLE! ASK YOUR CSM/CSE or SEE DOCS.VERACODE.COM ###

trigger:
- none

pool:
  vmImage: ubuntu-latest

jobs:

### BUILD APP FOR PIPELINE SCAN SAST, UPLOAD AND SCAN SAST, SCA ###
# Reference packaging guidance for your language/framework at https://docs.veracode.com/cheatsheet #

- job: BuildforUploadtoVeracode
  steps:
  - task: Maven@3
    displayName: Maven Build of Vuln App
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      goals: 'package'

### VERACODE PIPELINE SCAN SAST ###
# Set API ID & Key as secret variables. Configure further using https://docs.veracode.com/r/r_pipeline_scan_commands #
# Requires SAST product subscription #

- job: PipelineScanSAST
  dependsOn: BuildforUploadtoVeracode
  steps:
  - task: Bash@3
    displayName: Conduct Scan
    inputs:
      targetType: 'inline'
      script: |
        curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
        unzip -o pipeline-scan-LATEST.zip
        java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f {yourcompiled/packagedfiletouploadtoVeracode}
    continueOnError: true

  - task: PublishPipelineArtifact@1
    displayName: Store scan results as artifact
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/results.json'
      artifact: 'Pipeline Scan JSON results'
      publishLocation: 'pipeline'

### VERACODE AGENT-BASED SCA ###
# Generate API token via web UI. Configure using https://docs.veracode.com/r/Setting_Up_Agent_Based_Scans #
# Set SRCCLR_API_TOKEN as secret variable #
# Requires SCA product subscription. Scans repo directly, not build artifact. #

- job: AgentbasedSCA
  steps:
  - task: CmdLine@2
    displayName: Conduct Scan
    env:
      SRCCLR_API_TOKEN: $(SRCCLR_API_TOKEN)
    inputs:
      script: |
        curl -sSL https://download.sourceclear.com/ci.sh | bash -s - scan --update-advisor --allow-dirty
    continueOnError: true

### VERACODE UPLOAD AND SCAN SAST, SCA (TARGETING POLICY OR SANDBOX) ###
# Install from Azure marketplace, create service connection, configure using https://docs.veracode.com/r/t_install_azure_devops_extension #
# Requires SAST product subscription #
# Note: changing 'createProfile' to true will consume an app license, if you're using that subscription type #

- job: UploadandScanSASTSCA
  dependsOn: BuildforUploadtoVeracode
  steps:
  - task: Veracode@3
    displayName: Conduct Policy or Sandbox Scan
    inputs:
      ConnectionDetailsSelection: 'Service Connection'
      AnalysisService: 'Veracode Platform'
      veracodeAppProfile: '$(system.teamProject)'
      version: '$(build.buildNumber)'
      filepath: '{yourcompiled/packagedfiletouploadtoVeracode}'
      createProfile: true
      failBuildIfUploadAndScanBuildStepFails: true
      importResults: true
      failBuildOnPolicyFail: true
      optargs: '-deleteincompletescan 1, -scanpollinginterval 60'
      maximumWaitTime: '90'
    continueOnError: true

### VERACODE FLAW IMPORTER FOR MOST RECENT UPLOAD AND SCAN SAST, SCA ###
# Optional import to Azure Boards as work items, configure using https://docs.veracode.com/r/t_importflaws #

  - task: Veracode Flaw Importer@3
    displayName: Import scan results to Azure Boards
    inputs:
      ConnectionDetailsSelection: 'Service Connection'
      AnalysisService: 'Veracode Platform'
      veracodeAppProfile: '$(system.teamProject)'
      sandboxName: 
      scanType: 'Static, SCA'
      importType: 'All Unmitigated Flaws Violating Policy'
      workItemType: 'Bug'
      area: '$(system.teamProject)'
      overwriteAreaPathInWorkItemsOnImport: true
      iterationPath: '$(system.teamProject)'
      overwriteIterationPath: true
      flawImportLimit: '1000'

### VERACODE CONTAINER SECURITY IAC, SCA, SBOM ###
# Requires Container Security subscription #

- job: ContainerSecurity
  steps:
  - task: Bash@3
    displayName: Conduct Scan
    inputs:
      targetType: inline
      script: |
        pwd
        export VERACODE_API_KEY_ID=$(VERACODE_API_ID)
        export VERACODE_API_KEY_SECRET=$(VERACODE_API_KEY)
        curl -fsS https://tools.veracode.com/veracode-cli/install | sh
        ./veracode scan --source $(System.DefaultWorkingDirectory) --type repo --format table --output ./containerresults.txt
        ./veracode scan --source $(System.DefaultWorkingDirectory) --type directory --format json --output ./containerresults.json
        ./veracode scan --source $(System.DefaultWorkingDirectory) --type directory --format json --output ./SBOM.json
        cat ./containerresults.txt
        echo Generated table, JSON and SBOM artifacts
    continueOnError: true

  - task: PublishPipelineArtifact@1
    displayName: Store results as table artifact
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/containerresults.txt'
      artifact: 'Container Security .txt results'
      publishLocation: 'pipeline'

  - task: PublishPipelineArtifact@1
    displayName: Store results as JSON artifact
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/containerresults.json'
      artifact: 'Container Security .json results'
      publishLocation: 'pipeline'

  - task: PublishPipelineArtifact@1
    displayName: Store results as SBOM artifact
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/SBOM.json'
      artifact: 'Container Security SBOM results'
      publishLocation: 'pipeline'

  - task: Bash@3
    displayName: Record warnings
    inputs:
      targetType: 'inline'
      script: |
        declare -i vhiaccount=$(grep -c 'Found CRITICAL issues in infrastructure' $(System.DefaultWorkingDirectory)/containerresults.txt)
        declare -i hiaccount=$(grep -c 'Found HIGH issues in infrastructure' $(System.DefaultWorkingDirectory)/containerresults.txt)
        echo "##vso[task.logissue type=error]Found $vhiaccount Very High/Critical IaC issues in Container Scan.";
        echo "##vso[task.logissue type=error]Found $hiaccount High IaC issues in Container Scan.";

        declare -i vhscount=$(grep -c 'Found CRITICAL secret' $(System.DefaultWorkingDirectory)/containerresults.txt)
        declare -i hscount=$(grep -c 'Found HIGH secret' $(System.DefaultWorkingDirectory)/containerresults.txt)
        echo "##vso[task.logissue type=error]Found $vhscount Very High/Critical secret issues in Container Scan.";
        echo "##vso[task.logissue type=error]Found $hscount High secret issues in Container Scan.";

        declare -i vhvcount=$(grep -c 'Found Critical software vulnerability' $(System.DefaultWorkingDirectory)/containerresults.txt)
        declare -i hvcount=$(grep -c 'Found High software vulnerability' $(System.DefaultWorkingDirectory)/containerresults.txt)
        echo "##vso[task.logissue type=error]Found $vhvcount Very High/Critical severity library vulnerabilities in Container Scan.";
        echo "##vso[task.logissue type=error]Found $hvcount High severity library vulnerabilities in Container Scan.";

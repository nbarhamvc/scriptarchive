### NOTE: THIS IS THE MOST *BASIC* VERACODE PIPELINE WITH ALL SCANS FOR DEMO PURPOSES. MUCH MORE CUSTOMISATION IS AVAILABLE! ASK YOUR CSM/CSE or SEE DOCS.VERACODE.COM ###
# THIS PIPELINE MAKES EXTENSIVE USE OF ALLOW_FAILURE:TRUE - THIS IS FOR DEMONSTRATION PURPOSES ONLY. YOU MAY WANT TO FAIL A JOB BASED ON SOME SCAN TYPES #

# IMPORTANT: You must generate a Veracode API ID and Key in the Veracode web UI and store them as secrets ${VERACODE_API_ID} and ${VERACODE_API_KEY} #
# Credentials from API Service Accounts should be used, rather than from individual user accounts. Refer to docs.veracode.com for additional documentation. #
# This YML uses a deliberately vulnerable Java application and originated from https://github.com/nbarhamvc/scriptarchive. #

stages:
    - "Build for Veracode"
    - "SCA only"
    - "SAST only"
    - "Platform SAST & SCA Reporting"
    - "Container Security"

### BUILD APP FOR PIPELINE SCAN SAST, UPLOAD AND SCAN SAST, SCA ###

# IMPORTANT: You must package your application correctly per: https://docs.veracode.com/r/compilation_packaging, or using the cheat sheet: https://docs.veracode.com/cheatsheet/ #
# If after reading the guidance you need additional help packaging, please log into the Veracode web UI and click the 'Schedule a Consultation' button to schedule a call. #
# Note the team that will join a call to help with packaging will not be able to help with pipeline configuration. Contact your Veracode CSM for this and they will arrange a resource. #

Build app:
    image: maven:3-openjdk-8
    stage: "Build for Veracode"
    script:
      - mvn clean package -f ./app
    artifacts:
        paths:
        - app/

### VERACODE AGENT-BASED SCA ###

# Generate API token via web UI. Configure using https://docs.veracode.com/r/Setting_Up_Agent_Based_Scans #
# Scans repository directly, instead of using compiled/packaged artifacts. #
# Requires a SRCCLR_API_TOKEN be generated in the Veracode platform UI first and stored as a secret in GitLab. #
# Requires SCA product subscription. #

Agent-based SCA:
    image: maven:3-openjdk-8
    stage: "SCA only"
    needs: []
    script:
        - curl -sSL https://download.sourceclear.com/ci.sh | bash -s scan ./app --allow-dirty --update-advisor
    allow_failure: true

### VERACODE PIPELINE SCAN SAST ###

# IMPORTANT: The upload limit for Pipeline Scans is 200MB.
# Results from Pipeline Scan are not visible in the web UI. They are visible in the build log and as a generated results.json file.
# Language coverage is reduced when compared with Upload and Scan. See coverage here: https://docs.veracode.com/r/Pipeline_Scan_Supported_Languages
# Configure further using https://docs.veracode.com/r/r_pipeline_scan_commands. Requires SAST product subscription #

Pipeline Scan SAST:
    image: veracode/pipeline-scan:latest
    stage: "SAST only"
    needs:
        - Build app
    dependencies:
        - Build app
    script:
        - java -jar /opt/veracode/pipeline-scan.jar -vid ${VERACODE_API_ID} -vkey ${VERACODE_API_KEY} -f {filetouploadforscanning} -gig true -gvg true
    artifacts:
        paths:
            - results.json
            - filtered_results.json
        when: always
        name: "veracode-pipeline-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    allow_failure: true

### VERACODE UPLOAD AND SCAN SAST, SCA (TARGETING POLICY OR SANDBOX SCAN) ###

# IMPORTANT: Only one Policy Scan can run at a time. Only one Sandbox Scan can run at a time (per Sandbox). There is no queueing or waiting. #
# The upload limit for Upload and Scan is 5GB. Results are visible in the Web UI. #
# A Policy Scan will take place by default unless a Sandbox name is specified as a parameter. #
# See https://docs.veracode.com/r/r_uploadandscan for more information on optional parameters below. #
# Requires SAST product subscription. Note: using 'createProfile' as true will consume an app license, if you're using that subscription type #

Policy or Sandbox SAST, SCA Scan:
    image: veracode/api-wrapper-java
    stage: "Platform SAST & SCA Reporting"
    needs:
        - Build app
    dependencies:
        - Build app
    script:
        - java -jar /opt/veracode/api-wrapper.jar 
            -vid ${VERACODE_API_ID} 
            -vkey ${VERACODE_API_KEY}
            -action UploadAndScan 
            -appname ${CI_PROJECT_NAME} 
            -createprofile true 
            -scanpollinginterval 60
            -autoscan true
            -deleteincompletescan 1
            -filepath {filetouploadforscanning}
            -version "GL Job ${CI_JOB_ID} in pipeline ${CI_PIPELINE_ID}" 
            -scantimeout 90
    allow_failure: true

### VERACODE CONTAINER SECURITY IAC, SCA, SBOM ###

# Requires Container Security Subscription. Configure using https://docs.veracode.com/r/Veracode_CLI #

# Container Security IaC, SCA, SBOM:
#    image: python:latest
#    stage: "Container Security"
#    needs: []
#    script: |
#        apt update
#        apt install -y jq
#        export VERACODE_API_KEY_ID=${VERACODE_API_ID}
#        export VERACODE_API_KEY_SECRET=${VERACODE_API_KEY}
#        curl -fsS https://tools.veracode.com/veracode-cli/install | sh
#        ./veracode scan --source . --type directory --format table --output ./containerresults.txt
#        ./veracode scan --source . --type directory --format json --output ./containerresults.json
#        ./veracode scan --source . --type directory --format json --output ./SBOM.json
#        cat ./containerresults.txt
#        echo Generated table, JSON and SBOM artifacts
#        PASS=$(cat ./containerresults.json | jq -r '."policy-passed"' )
#        #PASS='passed'
#        echo "Passed policy: $PASS"
#        if [ $PASS == 'false' ]
#        then
#          exit 1
#        else
#          exit 0
#        fi
#    allow_failure: true

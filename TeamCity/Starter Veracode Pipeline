# NOTE: THIS IS THE MOST *BASIC* VERACODE PIPELINE WITH ALL SCANS FOR DEMO PURPOSES. MUCH MORE CUSTOMISATION IS AVAILABLE! ASK YOUR CSM/CSE or SEE DOCS.VERACODE.COM
# EACH OF THE BELOW ARE BUILD STEPS CONFIGURED FOR THE PROJECT IN TEAMCITY #

# IMPORTANT: You must generate a Veracode API ID and Key in the Veracode web UI and store them as secrets env.VERACODE_API_ID and env.VERACODE_API_KEY #
# Credentials from API Service Accounts should be used, rather than from individual user accounts. Refer to docs.veracode.com for additional documentation. #
# This configuration uses a deliberately vulnerable Java application and the file originated from https://github.com/nbarhamvc/scriptarchive. #

package _Self.buildTypes

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.buildFeatures.perfmon
import jetbrains.buildServer.configs.kotlin.buildSteps.maven
import jetbrains.buildServer.configs.kotlin.buildSteps.script
import jetbrains.buildServer.configs.kotlin.triggers.vcs

### BUILD APP FOR PIPELINE SCAN SAST, UPLOAD AND SCAN SAST, SCA ###

# IMPORTANT: You must package your application correctly per: https://docs.veracode.com/r/compilation_packaging, or using the cheat sheet: https://docs.veracode.com/cheatsheet/ #
# If after reading the guidance you need additional help packaging, please log into the Veracode web UI and click the 'Schedule a Consultation' button to schedule a call. #
# Note the team that will join a call to help with packaging will not be able to help with pipeline configuration. Contact your Veracode CSM for this and they will arrange a resource. #

object Build : BuildType({
    name = "Build"

    artifactRules = "**/* => target_directory"

    params {
        password("env.VERACODE_API_ID", "******", display = ParameterDisplay.HIDDEN)
        password("env.VERACODE_API_KEY", "******", display = ParameterDisplay.HIDDEN)
    }

    vcs {
        root(HttpsGitlabComVcnbarhamVerademoGitlabGitRefsHeadsMain)
    }

    steps {
        maven {
            goals = "compile"
            runnerArgs = "-Dmaven.test.failure.ignore=true"
        }

### VERACODE AGENT-BASED SCA ###

# Generate API token via web UI. Configure using https://docs.veracode.com/r/Setting_Up_Agent_Based_Scans #
# Scans repository directly, instead of using compiled/packaged artifacts. #
# Requires a SRCCLR_API_TOKEN be generated in the Veracode platform UI first and stored as an env. secret in TeamCity. #
# Requires SCA product subscription. #

        script {
            name = "Agent-based SCA"
            scriptContent = "curl -sSL https://download.sourceclear.com/ci.sh | bash -s scan --allow-dirty --update-advisor"
        }

### VERACODE PIPELINE SCAN SAST ###

# IMPORTANT: The upload limit for Pipeline Scans is 200MB.
# Results from Pipeline Scan are not visible in the web UI. They are visible in the build log and as a generated results.json file.
# Language coverage is reduced when compared with Upload and Scan. See coverage here: https://docs.veracode.com/r/Pipeline_Scan_Supported_Languages
# Configure further using https://docs.veracode.com/r/r_pipeline_scan_commands. Requires SAST product subscription #

        script {
            name = "Veracode Pipeline Scan SAST using API wrapper"
            scriptContent = """
                curl -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
                unzip -u pipeline-scan-LATEST.zip pipeline-scan.jar
                java -jar pipeline-scan.jar --veracode_api_id %env.VERACODE_API_ID% --veracode_api_key %env.VERACODE_API_KEY% --file "{pathtofile(s)foruploadtoVeracode}"
            """.trimIndent()
        }

### VERACODE UPLOAD AND SCAN SAST, SCA (TARGETING POLICY OR SANDBOX SCAN) ###

# Install extension from TeamCity marketplace and configure as build step. #
# IMPORTANT: Only one Policy Scan can run at a time. Only one Sandbox Scan can run at a time (per Sandbox). There is no queueing or waiting. #
# The upload limit for Upload and Scan is 5GB. Results are visible in the Web UI. #
# A Policy Scan will take place by default unless a Sandbox name is specified as a parameter. #
# See https://docs.veracode.com/r/r_uploadandscan for more information on optional parameters below. #
# Requires SAST product subscription. Note: using 'createProfile' as true will consume an app license, if you're using that subscription type #

        step {
            name = "Upload and Scan SAST, SCA (Policy) with Veracode"
            type = "teamcity-veracode-plugin"
            param("deleteIncompleteScan", "1")
            param("appName", "APPNAMEASONVERACODEPLATFORM")
            param("criticality", "VeryHigh")
            param("useGlobalCredentials", "true")
            param("version", "%build.number%")
            param("vid", "VERACODEAPIID")
            param("uploadIncludePattern", "{pathtofile(s)foruploadtoVeracode}")
            param("createProfile", "false")
            param("waitForScan", "true")
            param("createSandbox", "false")
            param("scanTimeOut", "90")
            param("vkey", "VERACODEAPIKEY")
        }

### VERACODE CONTAINER SECURITY IAC, SCA, SBOM ###

# Requires Container Security Subscription. Configure using https://docs.veracode.com/r/Veracode_CLI #

        script {
            name = "Container Security IaC"
            scriptContent = """
                export VERACODE_API_KEY_ID=%env.VERACODE_API_ID%
                export VERACODE_API_KEY_SECRET=%env.VERACODE_API_KEY%
                curl -fsS https://tools.veracode.com/veracode-cli/install | sh
                ./veracode scan --source . --type directory --format table --output ./containerresults.txt
                ./veracode scan --source . --type directory --format json --output ./containerresults.json
                ./veracode scan --source . --type directory --format json --output ./SBOM.json
                cat ./containerresults.txt
                echo Generated table, JSON and SBOM artifacts
            """.trimIndent()
        }

    }

    triggers {
        vcs {
            enabled = false
        }
    }

    failureConditions {
        testFailure = false
        nonZeroExitCode = false
        javaCrash = false
    }

    features {
        perfmon {
        }
    }
})

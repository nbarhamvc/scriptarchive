// Ensure correct Jenkins Maven distribution is specified. The build should refernce the Veracode packaging guidance on docs.veracode.com to ensure you are uploading correct artifacts.

pipeline {
    agent any

    environment {
        VERACODE_APP_NAME = '<INSERTAPPNAMEINVERACODEPLATFORMUI>'      
        
    }
    stages{
        stage ('environment verify') {
            steps {
                script {
                    if (isUnix() == true) {
                        sh 'pwd'
                        sh 'ls -la'
                        sh 'echo $PATH'
                    }
                    else {
                        bat 'dir'
                        bat 'echo %PATH%'
                    }
                }
            }
        }
		
		stage ('Clean workspace') {
            steps {
                cleanWs()
            }
        }

        stage ('Git Checkout') {
            steps {
                git branch: 'main', url: '<INSERTREPOURL>'
            }
        }
        stage ('build') {
            steps {
                withMaven(maven:'<SPECIFYMAVENVERSION') {	
                    script {
                        if(isUnix() == true) {
                            sh 'mvn clean package'
                        }
                        else {
                            bat 'mvn -f pom.xml clean package'
                        }
                    }
                }
            }
        }

        stage ('Upload and Scan SAST, SCA (Policy/Sandbox)') {
            steps {
                script {
                    if(isUnix() == true) {
                        env.HOST_OS = 'Unix'
                    }
                    else {
                        env.HOST_OS = 'Windows'
                    }
                }
                echo 'Upload and Scan SAST, SCA (Policy/Sandbox)'
                 withCredentials([usernamePassword(credentialsId: '<ENTERCREDENTIALSID>', passwordVariable: 'VERACODE_API_KEY', usernameVariable: 'VERACODE_API_ID')]) {
                veracode applicationName: "${VERACODE_APP_NAME}", criticality: 'VeryHigh', canFailJob: true, debug: false, deleteIncompleteScanLevel: '0', scanIncludesPattern: '<DEFINEFILEFORSCANNING>', scanName: '$timestamp', timeout: 60, uploadIncludesPattern: '<DEFINEFILEFORUPLOAD>', vid: "${VERACODE_API_ID}", vkey: "${VERACODE_API_KEY}"
                    }      
            }
        }

       stage ('Agent-based SCA') {
           steps {
               echo 'Agent-based SCA'
               withCredentials([ string(credentialsId: 'SRCCLR_API_TOKEN', variable: 'SRCCLR_API_TOKEN')]) {
                   withMaven(maven:'maven-3') {
                       script {
                           if(isUnix() == true) {
                               sh "curl -sSL https://download.sourceclear.com/ci.sh | sh"

                                // debug, no upload
                               //sh "curl -sSL https://download.sourceclear.com/ci.sh | DEBUG=1 sh -s -- scan --no-upload"
                           }
                           else {
                               powershell '''
                                           Set-ExecutionPolicy AllSigned -Scope Process -Force
                                           $ProgressPreference = "silentlyContinue"
                                           iex ((New-Object System.Net.WebClient).DownloadString('https://download.srcclr.com/ci.ps1'))
                                           srcclr scan --allow-dirty 
                                           '''
                           }
                       }
                   }
               }
           }
       }
    }
}

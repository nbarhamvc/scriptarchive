### NOTE: THIS IS THE MOST *BASIC* VERACODE PIPELINE WITH ALL SCANS FOR DEMO PURPOSES. MUCH MORE CUSTOMISATION IS AVAILABLE! ASK YOUR CSM/CSE or SEE DOCS.VERACODE.COM ###
# THIS PIPELINE MAKES EXTENSIVE USE OF ALLOW_FAILURE:TRUE - THIS IS FOR DEMONSTRATION PURPOSES ONLY. YOU MAY WANT TO FAIL A JOB BASED ON SOME SCAN TYPES #

# IMPORTANT: You must generate a Veracode API ID and Key in the Veracode web UI and store them as secrets ${{secrets.VERACODE_API_ID}} and ${{secrets.VERACODE_API_KEY}} #
# Credentials from API Service Accounts should be used, rather than from individual user accounts. Refer to docs.veracode.com for additional documentation. #
# This YML uses a deliberately vulnerable Java application and originated from https://github.com/nbarhamvc/scriptarchive. #
# Actions in the below YML are all obtainable from https://github.com/marketplace?category=&type=actions&verification=&query=veracode #

### PIPELINE TRIGGER ###

# Pipeline is configured to run manually for demonstration purposes only. Typically would not run all of these scans sequentially, for example may run on Pull Request. #
# For more assistance with where and when to run these scans, contact your Vercode CSM and they will arrange a resource. #

name: Starter Veracode Pipeline
on: workflow_dispatch

jobs:

### BUILD APP FOR PIPELINE SCAN SAST, UPLOAD AND SCAN SAST, SCA ###

# IMPORTANT: You must package your application correctly per: https://docs.veracode.com/r/compilation_packaging, or using the cheat sheet: https://docs.veracode.com/cheatsheet/ #
# If after reading the guidance you need additional help packaging, please log into the Veracode web UI and click the 'Schedule a Consultation' button to schedule a call. #
# Note the team that will join a call to help with packaging will not be able to help with pipeline configuration. Contact your Veracode CSM for this and they will arrange a resource. #

  Checkoutandbuild:
    runs-on: ubuntu-latest

    steps:
    
    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Store WAR artifact
      uses: actions/upload-artifact@v3
      with:
        name: {filetouploadforVeracodeScanning}
        path: {path&filetouploadforVeracodeScanning}

### VERACODE PIPELINE SCAN SAST ###

# IMPORTANT: The upload limit for Pipeline Scans is 200MB.
# Results from Pipeline Scan are not visible in the web UI. They are visible in the build log and as a results.json file. #
# Language coverage is reduced when compared with Upload and Scan. See coverage here: https://docs.veracode.com/r/Pipeline_Scan_Supported_Languages. #
# Configure further using https://docs.veracode.com/r/r_pipeline_scan_commands. Requires SAST product subscription #
# The below makes use of the Veracode GitHub Actions relating to Pipeline Scan and imports findings into GitHub Issues. #

  VeracodePipelineScan:
    needs: Checkoutandbuild
    runs-on: ubuntu-latest
   
    steps:
    
    - name: Obtain war file for upload
      uses: actions/download-artifact@v3
      with: 
       name: {filetouploadforVeracodeScanning}
       path: {path&filetouploadforVeracodeScanning}
    
    - name: Veracode Pipeline-Scan
      uses: veracode/Veracode-pipeline-scan-action@v1.0.10
      with:
        vid: ${{secrets.VERACODE_API_ID}}
        vkey: ${{secrets.VERACODE_API_KEY}}
        file: {filetouploadforVeracodeScanning}
        token: ${{ github.token }}
        fail_build: true
      continue-on-error: true

    - name: Store filtered results
      uses: actions/upload-artifact@v3
      with:
        name: filtered-results
        path: filtered_results.json

# Importing filtered_results.json into GitHub Issues #

  VeracodePipelineScanResultsImport:
    needs: VeracodePipelineScan
    runs-on: ubuntu-latest

    steps:
    
    - name: Get scan results
      uses: actions/download-artifact@v3
      with:
        name: filtered-results
    
    - name: Veracode scan results to GitHub issues Action
      uses: veracode/veracode-flaws-to-issues@v2.1.20
      with:
        scan-results-json: filtered_results.json
        github-token: ${{ github.token }}

# Note: To be able to see code snippets in GitHub Issues, the below paths should be correspond to the location of the source code in your application: #

        source_base_path_1: "com/veracode:src/main/java/com/veracode" 
        source_base_path_2: "WEB-INF:src/main/webapp/WEB-INF"

########## VERACODE UPLOAD AND SCAN SAST, SCA (Policy or Sandbox Scan) ###########

# IMPORTANT: Only one Policy Scan can run at a time. Only one Sandbox Scan can run at a time (per Sandbox). There is no queueing or waiting. #
# The upload limit for Upload and Scan is 5GB. Results are visible in the Web UI. #
# A Policy Scan will take place by default unless a Sandbox name is specified as a parameter. #
# See https://docs.veracode.com/r/r_uploadandscan for more information on optional parameters below. #

  UploadandScan:
    runs-on: ubuntu-latest
    needs: Checkoutandbuild

    steps:
    
    - name: Obtain war file for upload
      uses: actions/download-artifact@v3
      with: 
       name: {filetouploadforVeracodeScanning}
       path: {path&filetouploadforVeracodeScanning}

    - name: Veracode Upload And Scan
      uses: veracode/veracode-uploadandscan-action@0.2.6
      with:
        appname: ${{ github.repository }}
        createprofile: true
        filepath: {filetouploadforVeracodeScanning}
        version: ${{ github.run_id }}
        vid: ${{secrets.VERACODE_API_ID}}
        vkey: ${{secrets.VERACODE_API_KEY}}
        scantimeout: 90
        deleteincompletescan: 1
        scanpollinginterval: 60
      continue-on-error: true

### VERACODE AGENT-BASED SCA ###

# Generate API token via web UI. Configure using https://docs.veracode.com/r/Setting_Up_Agent_Based_Scans #
# Scans repository directly, instead of using compiled/packaged artifacts, then imports results into GitHub Issues. #
# Requires a SRCCLR_API_TOKEN be generated in the Veracode platform UI first and stored as a secret in GitHub. #
# Requires SCA product subscription. #

  Agent-basedSCA:
    runs-on: ubuntu-latest

    steps:
    
    - name: Check out code
      uses: actions/checkout@v3

    - name: Agent-based SCA dependency scan and results import
      uses: veracode/veracode-sca@v2.1.9
      env:
            SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
      with:
            github_token: ${{ github.token }}
            update_advisor: true
            create-issues: true
            allow-dirty: true
      continue-on-error: true

# At present, above action does not output results in build log. If this is required, use OPTIONAL step below instead/in addition. #

    - name: OPTIONAL Agent-based SCA scan with results in build log
      env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}      
      run: |
          curl -sSL https://download.sourceclear.com/ci.sh | bash -s scan --allow-dirty --update-advisor
  
### VERACODE CONTAINER SECURITY (IaC, Secrets, SCA Vulnerabilities) ###

 Requires Container Security Subscription. Configure using https://docs.veracode.com/r/Veracode_CLI #

  VeracodeContainerIaCSecrets:
    runs-on: ubuntu-latest

    steps:

    - name: Veracode Container/IaC/Secrets Scanning GitHub Action
      uses: veracode/container_iac_secrets_scanning@v1.0.2
      with:
        vid: ${{secrets.VERACODE_API_ID}}
        vkey: ${{secrets.VERACODE_API_KEY}}
        github-token: ${{ github.token }}
        command: scan
        source: .
        format: json
        type: repo
        fail_build: true
      continue-on-error: true

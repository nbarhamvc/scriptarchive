# YML for use in GitHub pipelines. Note that many scan types are included here (along with multiple methods of submitting scans) as an EXAMPLE.
# It may not make sense to have all scans run, sequentially or at all, depending on your workflow.

name: Veracode scan examples

# Configured to run on push of development branch. This YML contains all scan types.

on:
  workflow-dispatch

# Note: choosing Linux runner, conscious of using any PowerShell scripts

jobs:

# Checking out code from repo, building using maven and uploading .war file to temp directory

  App-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots package
      
      - name: Upload war file
        uses: actions/upload-artifact@v3
        with:
          name: verademo.war
          path: target/verademo.war

# Veracode Pipeline Scan SAST using docker image, which contains the Pipeline Scan jar file. Uses API ID/KEY environment variables. 
# Takes artifact from build step and uploads to Veracode servers for scanning (see -f parameter).
# Note: this scan type could also be conducted outside of a docker image by downloading and calling the wrapper directly.

  Veracode-Pipeline-Scan-SAST-using-docker:
      needs: App-build
      runs-on: ubuntu-latest
      container: 
        image: veracode/pipeline-scan:latest
        options: --user root
      steps:
        - name: get archive
          uses: actions/download-artifact@v2
          with:
            name: verademo.war
            path: /tmp
        - name: pipeline-scan
          run: | 
            java -jar /opt/veracode/pipeline-scan.jar \
              -vid "${{secrets.VERACODE_API_ID}}" \
              -vkey "${{secrets.VERACODE_API_KEY}}" \
              --file /tmp/verademo.war \
              -jf results.json \
              -fjf filtered_results.json 
          continue-on-error: true
        - name: save standard results
          uses: actions/upload-artifact@v1
          with:
            name: PipelineScanResults
            path: results.json
        - name: save filtered results
          uses: actions/upload-artifact@v1
          with:
            name: filtered-results
            path: filtered_results.json

# Converting for import into GitHub as Issues in SARIF format.

        - name: Convert pipeline scan output to SARIF format 
          id: convert
          uses: veracode/veracode-pipeline-scan-results-to-sarif@v1.0.5
          with:
            pipeline-results-json: results.json
            source-base-path-1: "^com/veracode:src/main/java/com/veracode"
            source-base-path-2: "^WEB-INF:src/main/webapp/WEB-INF"       

# Importing SARIF into GitHub Issues.

  Import-Pipeline-Scan-Results-As-Issues:
    needs: Veracode-Pipeline-Scan-SAST-using-docker
    runs-on: ubuntu-latest
    steps:
      - name: get scan results
        uses: actions/download-artifact@v2
        with:
          name: filtered-results

      - name: import flaws as issues
        uses: veracode/veracode-flaws-to-issues@v2.1.19
        with:
          scan-results-json: 'filtered_results.json'
          github-token: ${{ secrets.GITHUB_TOKEN }}

# Alternative option to use GitHub action for Pipeline Scan:

  Veracode-Pipeline-Scan-SAST-using-GH-Action:
    needs: App-build
    runs-on: ubuntu-latest
    steps:
        - name: get archive
          uses: actions/download-artifact@v2
          with:
            name: verademo.war
            path: /tmp
    
        - name: Veracode Pipeline-Scan action
          uses: veracode/Veracode-pipeline-scan-action@v1.0.9
          with:
            vid: "${{secrets.VERACODE_API_ID}}"
            vkey: "${{secrets.VERACODE_API_KEY}}"
            file: /tmp/verademo.war
            token: ${{ secrets.GITHUB_TOKEN }}
  
# Agent-based SCA scan submission using GitHub Action, scans repo directly, does not require built artifact. 
# Requires SRCCLR_API_TOKEN to be generated on platform then saved as secret for use here.
# Sourceclear was acquired by Veracode in 2018 - this is a trusted domain. The script will download the agent, run it for the purposes of scan, then delete itself.
  
  Agent-based-SCA-using-GH-ACtion:
        runs-on: ubuntu-latest
        name: Agent-based-SCA

        steps:
          - name: Checkout
            uses: actions/checkout@v2
          - name: Run Veracode SCA
            env:
              SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
            uses: veracode/veracode-sca@v2.1.9
            with:
              github_token: ${{ secrets.GITHUB_TOKEN }}
              create-issues: false

# Upload and Scan SAST, SCA in a development Sandbox, using GitHub Action. A number of parameters can be passed, see docs.veracode.com for relevant article.
# Takes artifact built earlier and uploads to Veracode platform for scanning.
# If no sandbox parameter is specified, Policy Scan will take place.
# Avoid exposing credentials in pipeline, set API ID and KEY as secrets.
# Note: this scan type could also be conducted in a docker image or by downloading and calling the wrapper directly.

  Upload-and-Scan-SAST-SCA-Sandbox-using-GH-Action:
    runs-on: ubuntu-latest
    needs: App-build
    steps:
      - name: Download war file
        uses: actions/download-artifact@v3
        with: 
          name: verademo.war
          path: .
    
      - name: Sandbox Scan
        uses: veracode/veracode-uploadandscan-action@0.2.6
        with:
          appname: "verademo-github"
          createsandbox: false
          sandboxname: "verademo-github-sandbox"
          version: '${{ github.run_id }}'
          filepath: 'verademo.war'
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          scantimeout: 15
  
  # Upload and Scan SAST, SCA at Policy level, using GitHub Action.
  
  Upload-and-Scan-SAST-SCA-Policy-using-GH-Action:
    runs-on: ubuntu-latest
    needs: Upload-and-Scan-SAST-SCA-Sandbox-using-GH-Action
    steps:
      - name: Download war file
        uses: actions/download-artifact@v3
        with: 
          name: verademo.war
          path: .
      
      - name: Policy Scan
        uses: veracode/veracode-uploadandscan-action@0.2.6
        with:
          createprofile: false
          appname: "verademo-github"
          version: '${{ github.run_id }}'
          filepath: 'verademo.war'
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          scantimeout: 15

# Veracode Container Security scan using GH Action. Set up to scan deliberately insecure Terraform directory using API ID and Key

  Container-Security:
      runs-on: ubuntu-latest
      name: Verracode Container/IaC/Secrets scan

      steps:
        - name: checkout
          uses: actions/checkout@v3

        - name: Veracode Container/IaC/Secrets action step
          uses: veracode/container_iac_secrets_scanning@v1.0.0
          with:
            vid: ${{ secrets.VERACODE_API_ID }}
            vkey: ${{ secrets.VERACODE_API_KEY }}
            command: "scan" 
            type: "repo"
            source: "https://github.com/bridgecrewio/terragoat"
            format: "json"
            debug: false
            fail_build: false
